service: serverlessSetup
	
package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'eu-west-1'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TASKS_TABLE: Tasks-${self:provider.stage}

# functions
functions:
  hello:
    handler: src/lambdas/hello.handler
    events: # The events that trigger this function
      - http: 
          path: serverlessSetup/hello
          method: get
  goodbye:
    handler: src/lambdas/goodbye.handler
    events:
      - http: 
          path: serverlessSetup/goodbye
          method: post
  question:
    handler: src/lambdas/question.handler
    dependsOn: SNSQuestionEvent
    events:
      - sns:
          arn: !Ref SNSQuestionEvent
          topicName: question-event
          redrivePolicy:
            deadLetterTargetRef: DeadLetterQueue
  createTask:
    handler: src/lambdas/createTask.handler
    events:
      - http:
          method: post
          path: tasks
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
  getTasks:
    handler: src/lambdas/getTasks.handler
    events:
      - http:
          method: get
          path: tasks
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
  updateTask:
    handler: src/lambdas/updateTask.handler
    events:
      - http:
          method: patch
          path: tasks/{id}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
  deleteTask:
    handler: src/lambdas/deleteTask.handler
    events:
      - http:
          method: delete
          path: tasks/{id}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
  sendEmail:
    handler: src/lambdas/sendEmail.handler
    dependsOn: SNSSendEmailEvent
    events:
      - http: 
          path: serverlessSetup/sendEmail
          method: post
      - sns:
          arn: !Ref SNSSendEmailEvent
          topicName: email-event
          redrivePolicy:
            deadLetterTargetRef: DeadLetterQueue
  handleDLQ:
    handler: src/lambdas/handleDLQ.handler
    dependsOn: SNSSendEmailEvent
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
    iamRoleStatements:
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: '*'
  sendToSns:
    handler: src/lambdas/sendToSns.handler
    events:
    - http:
        method: post
        path: serverlessSetup/sendToSns
  sendToSqs:
    handler: src/lambdas/sendToSqs.handler
    events:
    - http:
        method: post
        path: serverlessSetup/sendToSqs

# Serverless plugins
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-sqs
  - serverless-offline-sns
  - serverless-offline-ses-v2


# Resources your functions use
resources:
  Resources:
    # SNS Topics
    SNSQuestionEvent:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Question Event Topic
        TopicName: question-event
    SNSSendEmailEvent:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Send email Event Topic
        TopicName: email-event
    TasksDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # AWS Free tier
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: DeadLetterQueue

custom:
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  serverless-offline:
    httpPort: 3003
  dynamodb:
    start:
      port: 8001
      inMemory: true
      migrate: true
    stages:
    - development
  serverless-offline-ses-v2:
    port: 8005
  serverless-offline-sns:
    port: 4002
    debug: false
  serverless-offline-sqs:
    autoCreate: true
    debug: true                # create queue if not exists
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false